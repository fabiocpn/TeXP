options(echo=TRUE)
args <- commandArgs(trailingOnly = TRUE)

#
signature_file = args[1]
TEMPLATEsub_counts_file = args[2]
total_reads_file = args[3]
factor_tpm_file = args[4]
#
library(mixedMem)

signature=read.table(signature_file,header=T,row.names=1);  
counts=read.table(TEMPLATEsub_counts_file,header=T,row.names=1);   #Number of reads at each subfamily

signature[signature==0]=1e-10

#Number of samples
Total=1

# Number of Sub-populations
K = dim(signature)[2]

#Number of variables. (So if you think about a variable as a question in a survey, you can hypothetically think that you asked the machine for a gene, and the machine responded with a multinomial of size 1 by simply returning a single gene. Then you repeated/replicated this question many many times
J = 1

# Number of repetitions. This is now where we see exactly how many times the "machine responded"
Rj = c(sum(counts))

#Number of candidates (this is the number of categories in the multinomial data. so the number of options the machine could have returned for each replication)
Vj = dim(signature)[1]

#Distributions of each variable
dist = rep("multinomial",J)

dirichlet_parmeter = 0.1 #( 0 < x < 1 ), Where 0 is less certain about the priors and 1 is more certain about the priors.
#Inialization of populations proportions. 
alpha = rep(dirichlet_parmeter, K)
#alpha[length(alpha)] = 20

#Start theta using the signature.
theta <- array(0, dim = c(J, K, max(Vj)))
for (j in 1:J) {
	theta[j, , ] = t(signature)/colSums(signature)
}

Nijr = array(1, dim = c(Total, J, max(Rj)))

#Reshape the observations
obs = array(-1,  dim = c(Total, J, max(Rj), max(Nijr)))
count_i=0;
count_j=0;
for (i in counts) {
  for (j in seq(i)) { 
    if (i != 0 ) {
	    count_j = count_j + 1;
	    obs[1,1,count_j,1]=count_i;
	}
  } 
  count_i = count_i + 1; 
}

initial=mixedMemModel(Total = Total, J = J, Rj = Rj, Nijr = Nijr, K = K, Vj = Vj, alpha = alpha, theta = theta, dist = dist, obs = obs)
out = mmVarFit(initial, printStatus = 1, printMod = 25, stepType=0)

TEMPLATE_reads = out$phi
colnames(TEMPLATE_reads) = colnames(signature)
percentages = out$phi/sum(out$phi)

##
## Quantify element transcription
##
#tot = scan(total_reads_file)
#factor_tpm = scan(factor_tpm_file)
#length = TEMP_LENGTH
#reads = B
#TEMPLATE_percent_signal = percentages$X[1:(length(percentages$X)-1)]

#TO-DO: Should this be dim(colnames(A))?
#TEMPLATE_reads = data.frame(x=numeric(dim(B)[1]-1));
#corrected_TEMPLATE_reads = data.frame(x=numeric(dim(B)[1]-1));


#count=1; 
#for (j in head(colnames(A),-1)) { 
#	i = gsub("_Transcript","",j)
#	j=paste(sub("-",".",i),"_Transcript",sep=""); 
#	if ( !is.na(B[i,]) &&  !is.null(A[i,j]) && !is.na(TEMPLATE_percent_signal[j]) ) {
#		TEMPLATE_reads[count,] =  B[i,]
#		rownames(TEMPLATE_reads)[count] = i
#		signal = A.scale[,j]*TEMPLATE_percent_signal[j]*attr(B.scale, 'scaled:scale')
#		reads_from_signal = signal[i]*(1/A[i,j])
#		corrected_TEMPLATE_reads[count,] = reads_from_signal
#		rownames(corrected_TEMPLATE_reads)[count] = i
#		count=count+1;
#	}
#}
#TEMPLATE_reads = TEMPLATE_reads[1:count-1,,drop=FALSE]
#corrected_TEMPLATE_reads = corrected_TEMPLATE_reads[1:count-1,,drop=FALSE]

rpkm = data.frame((TEMPLATE_reads*10^9)/(length*tot))
colnames(rpkm)=c("RPKM")

rpkm.corrected = data.frame((corrected_TEMPLATE_reads*10^9)/(length*tot))
colnames(rpkm.corrected)=c("RPKM")

tpm = data.frame((TEMPLATE_reads/length)*(1/factor_tpm)*10^6)
colnames(tpm)=c("TPM")

tpm.corrected = data.frame((corrected_TEMPLATE_reads/length)*(1/factor_tpm)*10^6)
colnames(tpm.corrected)=c("TPM")

##
## Dump results into file
##
write.table(percentages$X,file=paste(TEMPLATEsub_counts_file,"signal_proportions",sep="."))

write.table(rpkm,file=paste(TEMPLATEsub_counts_file,"rpkm",sep="."),quote=F)
write.table(rpkm.corrected,file=paste(TEMPLATEsub_counts_file,"rpkm.corrected",sep="."),quote=F)
write.table(tpm,file=paste(TEMPLATEsub_counts_file,"tpm",sep="."),quote=F)
write.table(tpm.corrected,file=paste(TEMPLATEsub_counts_file,"tpm.corrected",sep="."),quote=F)

write.table(corrected_TEMPLATE_reads,file=paste(TEMPLATEsub_counts_file,"corrected",sep="."))

